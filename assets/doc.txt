# find
MongoRepo
	.find('{query}')

	.skip(n)		# skip n document
	.limit(n)		# limit results to n document
	.sort({..})		# sort
	.fileds({..})	# fields projection
	.timeout(ms)	# query execution timeout in ms

	.hint({...})	# indexes to use to make query faster
	.min(min)		# index bounds
	.max(max)		# index bounds
	.comment(str)	# debug purpose query comment

	.distinct('key') # distinct documents using this field key

	# modify first element (throw error if limit isnt 1)
	.updateWith('{update}')
	.replaceWith('{doc}')
	.remove			# remove doc from database
	.new			# return modified document instead of original one

	# flags
	.upsert			# create documents if exists
	.explain		# explain query instead of returning data
	.tailable		# do the cursor is tailable
	.raw			# return raw BSON buffer
	.partial		#

	.count			# return document count instead
	
	.native			# do not convert documents into Model instances
	.options({other options})


# insert
MongoRepo
	.insert doc1	# insert this doc
	.insert doc2	# insert doc2
	.insertAll docs	# insert all docs

	.timeout(ms)	# execution timeout
	.localId		# do not force ids to be generated by the server, accept driver ids instead
	.ordered		# when insert fails, cancel remining writes
	.options({other options})

# delete
MongoRepo
	.remove({query})

	.limit(0) # remove all found documents
	.limit(1) # remove only one document
	.limit(n) # throws Error if n isnt 1 or 0

	.timeout(ms)
	.options({other options})

# replace
MongoRepo
	.replaceOne {filter}, {replaceDoc}

	.timeout(ms)
	.upsert

	.options({other options})

# Aggregation
MongoRepo
	# aggregation pipeline
	.pipe {}
	.pipe {}
	.pipe {}
	.pipeLine [pipeline]

	.timeout(ms)

	.explain
	.raw
	.hint({...})
	.options({other options})

# Bulk write
MongoRepo
	.write {...}
	.write {...}
	.write {...}
	.writeAll [{...}]

	.timeout(ms)
	.ordered		# cancel remining when fails
	.options({other options})